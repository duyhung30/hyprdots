(defwidget media_playerSmall []
  
  (eventbox
    :onhover "${EWW_CMD} update media_playerHover=true"
    :onhoverlost "${EWW_CMD} update media_playerHover=false"
    (revealer
      :reveal {  playerctl.status == "Playing" || playerctl.status == "Paused" }
      :transition "slideleft"
      :class "media_revealer"
      (overlay
        
        (box
          :class "media_player module"
          :space-evenly false
          :spacing 5
          :class { (revealmpd ? cover != "./image/emptympd.png" : pcover != "") ? "mpdcover" : "widget"}
          :style "background-image: linear-gradient(45deg, rgba(35, 35, 35, 1), rgba(35, 35, 35, ${!media_playerHover ? '0.5' : '0.0'})), url('${revealmpd ? cover : pcover}'); margin: 5px; border-radius: 8px;"
          (label
            :class "icon ${playerctl.source == 'spotify' || playerctl.source == 'firefox' ? playerctl.source : 'generic'}"
            :text {
            playerctl.source == "spotify" ? "" :
            playerctl.source == "brave" ? "󰈹" : "󰋋"
            ;; playerctl.source == "firefox" ? "󰈹" : "󰋋"
            }
          )
          (box
            :space-evenly false
            :spacing 10
            (revealer
              :reveal media_playerHover
              :transition "slideleft"
              (box
                :space-evenly false
                :spacing 10
                (button
                  :onclick "playerctl previous"
                  (label
                    :text "󰒮"
                    :class "icon"
                  )
                )
                (button
                  :onclick "playerctl play-pause &"
                  (label
                    :text {playerctl.status == "Playing" ? "󰏤" : "󰐊"}
                    :class "icon"
                  )
                )
              )
            )
            
            (button
              :onclick "playerctl next"
              (label
                :text "󰒭"
                :class "icon"
              )
            )
          )
        )
        (box
          :space-evenly false
          :hexpand true
          :vexpand true
          :style "border-radius: 10px; margin: 5.5px 0;"
          :class "module"
        )
      )
    )
  )
)

(defwidget media_playerBig []
  (revealer
    :reveal {  playerctl.status == "Playing" || playerctl.status == "Paused" }
    :transition "slideleft"
    (overlay
      (box
        :class "media_playerBig module"
        :space-evenly false
        :spacing 5
        :style "background-image: linear-gradient(45deg, rgba(35, 35, 35, 1), rgba(35, 35, 35, 0.5)), url('${playerctl.artUrl}');"
        (box
          :space-evenly false
          :valign "center"
          :class "media_playerAlbumArt"
          :width 75
          :height 75
          :style "
          background-image: url('${playerctl.artUrl}');
          "
        )
        
        (overlay
          :hexpand true
          :vexpand true
          
          (box
            :orientation "v"
            :space-evenly false
            
            (label
              :text {playerctl.title}
              :class "title"
              :wrap true
              :limit-width 15
              :halign "center"
            )
            
            (label
              :text {playerctl.artist}
              :class "artist"
              :wrap true
              :limit-width 25
            )
            
            (box
              :space-evenly false
              :spacing 10
              :halign "center"
              :valign "end"
              
              (button
                :onclick "playerctl previous &"
                (label
                  :text "󰒮"
                  :class "icon"
                )
              )
              (button
                :onclick "playerctl play-pause"
                (label
                  :text {playerctl.status == "Playing" ? "󰏤" : "󰐊"}
                  :class "icon"
                )
              )
              (button
                :onclick "playerctl next &"
                (label
                  :text "󰒭"
                  :class "icon"
                )
              )
            )
            
            (scale
                :min 0
                :max 100
                :value {round(playerctlCTime / playerctl.length * 100000000, 0)}
                :class "scale"
                :hexpand true
                :height 10
            )
          )
          (label
            :class "icon ${playerctl.source == 'spotify' || playerctl.source == 'firefox' ? playerctl.source : 'generic'}"
            :halign "end"
            :valign "start"
            :xalign 0
            :yalign 1
            :text {
            playerctl.source == "spotify" ? "" :
            playerctl.source == "firefox" ? "󰈹" : "󰋋"
            }
          )
          
        )
      )
      (box
        :space-evenly false
        :hexpand true
        :vexpand true
        :style "border-radius: 19px; border: 2px solid #232323;"
        :class "module"
      )
    )
  )
)
